************************************************************
funcion get_next_line
************************************************************

1. Comprobamos posibles errores.
2. Almacenamos lo que hemos leído en la variable estática left_str. (ft_read_to_left_str)
3. Devolvemos null en caso de recibir un fd invalido en la lectura en el Paso (4.) de
la siguiente función.
4. Almacenamos la linea que vamos a retornar en line. (ft_get_line)
5. Guardamos en la variable estatica el resto del contenido del fd sin la información
que ya hemos retornado. (ft_new_left_str)

************************************************************
funcion ft_read_to_left_str
************************************************************

1. Reservamos la memoria para el buffer con el tamaño que se ha determinado al lanzar el
programa y le añadimos +1 para el final ('\0'). Finalmente nos protegemos frente a errores.
2. Entramos al bucle siempre que no encontremos un salto de linea en la string
con "ft_strchr" o, que read sea mayor que 0, ya que:
-si la función read no lee nada antes del end of file (EOF), devuelve 0
-si la función read recibe un error antes de leer, devuelve -1.
3. Almacenamos en rd_bytes el numero de bytes leídos hasta BUFFER_SIZE bytes bajo las
condiciones del bucle.
4. Si tenemos un error de lectura liberamos la memoria reservada y devolvemos NULL.
5. Ponemos el final al buffer en la cantidad de bytes que se han leido.
6. Unimos el contenido de la variable buffer dentro de nuestra variable estática para
la persistencia de la información.
7. Liberamos la memoria del buffer.
8. Devolvemos la variable estatica.

************************************************************
funcion ft_strlen
************************************************************

La usaremos para obtener la longitud de las cadenas de left_str y buff.

************************************************************
funcion ft_strchr
************************************************************

La usamos en el bucle de la función ft_read_to_left_str Paso(2.) para buscar un salto de linea
en left_str y en tal caso parar el bucle.

************************************************************
funcion ft_strjoin
************************************************************

La usamos para unir el contenido del buffer dentro de la variable estatica para la persistencia
de la información.

1. Reservamos la memoria para el caso en que no recibamos la variable estática.
2. Reservamos la memoria para la nueva cadena donde almacenaremos left_str y el buffer.
3. Como necesitamos acortar código para cumplir con las 25 líneas por función:
- Ponemos el valor -1 a la variable i, para empezar sumando una posición a esta variable dentro
de las condiciones del próximo while y así nos ahorramos los corchetes del while y la linea de suma.
4. Si left_str existe comenzamos el bucle para copiar su contenido en la nueva cadena str.
5. Después guardamos el contenido del buffer en str seguido de donde lo habíamos dejado.
6. Ponemos el final a la cadena str en la posición final tras la suma de ambas cadenas.
7. Liberamos la memoria reservada para left_str.
8. Devolvemos str con el contenido de ambas cadenas unidas.

************************************************************
funcion ft_get_line
************************************************************

Usaremos esta función para extraer de left_str la línea que queremos devolver con get_next_line.

1. Guardamos en "i" el tamaño que hay en left_str hasta el primer salto de linea (sin incluir).
2. Reservamos la memoria de str con el tamaño de i + 2 huecos donde irán el salto de línea y el final.
3. Copiamos la cadena extraída de left_str hasta el salto de linea (sin incluir) en str.
4. Si encontramos un salto de linea en left_str añadimos el salto de linea en esta posición y avanzamos.
5. Ponemos el final a la cadena y la devolvemos.

************************************************************
funcion ft_new_left_str
************************************************************

Con esta función almacenaremos en nuestra variable estática el resto de información que nos falta
por devolver sin la información que ya hemos devuelto.

1. Empezamos avanzando i hasta el salto de linea dejando atrás todo lo que vamos a devolver en el
paso anterior.
2. Si no hay nada liberamos la memoria y devolvemos NULL.
3. Reservamos con malloc la memoria para todo el contenido de left_str, restando el tamaño que
hemos obtenido en el paso anterior y sumando uno para el final.
4. Avanzamos hasta la siguiente posición tras el salto de línea.
5. Copiamos lo que hay tras el salto de linea de left_str en str.
6. Ponemos el final a la string a devolver.
7. Liberamos la memoria reservada con el malloc.
8. Almacenamos en left_str lo que nos queda por devolver sin lo que hemos devuelto.